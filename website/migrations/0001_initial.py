# Generated by Django 5.2.3 on 2025-06-18 06:47

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the blog category (e.g., 'Web Development')", max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='A URL-friendly version of the category name (auto-generated)', max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the sender', max_length=100)),
                ('email', models.EmailField(help_text='Email address of the sender', max_length=254)),
                ('subject', models.CharField(blank=True, help_text='Subject of the message', max_length=200, null=True)),
                ('message', models.TextField(help_text='Content of the message')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Date and time the message was received')),
                ('is_read', models.BooleanField(default=False, help_text='Indicates if the message has been read by an admin')),
            ],
            options={
                'verbose_name_plural': 'Contact Messages',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Title of the service (e.g., 'Web Development')", max_length=100)),
                ('slug', models.SlugField(blank=True, help_text='A URL-friendly version of the service title (auto-generated)', max_length=100, unique=True)),
                ('short_description', models.CharField(help_text='A brief summary of the service for cards/listings.', max_length=255)),
                ('detailed_description', models.TextField(help_text='Detailed description of the service for its dedicated page.')),
                ('image', models.ImageField(blank=True, help_text='Image representing the service.', null=True, upload_to='services/')),
                ('icon_class', models.CharField(blank=True, help_text="Font Awesome or other icon class (e.g., 'fas fa-cogs')", max_length=50, null=True)),
                ('key_features', models.TextField(blank=True, help_text="List key features of the service, one per line (e.g., 'Custom Design', 'Responsive Layout')", null=True)),
                ('order', models.IntegerField(default=0, help_text='Order in which services should appear')),
            ],
            options={
                'verbose_name_plural': 'Services',
                'ordering': ['order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the team member', max_length=100)),
                ('role', models.CharField(help_text="Role or title of the team member (e.g., 'CEO', 'Lead Developer')", max_length=100)),
                ('bio', models.TextField(blank=True, help_text="A short biography or description of the team member's expertise.", null=True)),
                ('profile_picture', models.ImageField(blank=True, help_text='Profile picture of the team member', null=True, upload_to='team_members/')),
                ('linkedin_url', models.URLField(blank=True, help_text='LinkedIn profile URL (optional)', null=True)),
                ('twitter_url', models.URLField(blank=True, help_text='Twitter profile URL (optional)', null=True)),
                ('github_url', models.URLField(blank=True, help_text='GitHub profile URL (optional)', null=True)),
                ('order', models.IntegerField(default=0, help_text='Order in which team members should appear (lower number first)')),
            ],
            options={
                'verbose_name_plural': 'Team Members',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the technology (e.g., 'Python', 'React')", max_length=50, unique=True)),
                ('icon_class', models.CharField(blank=True, help_text='Font Awesome or other icon class for the technology', max_length=50, null=True)),
            ],
            options={
                'verbose_name_plural': 'Technologies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_name', models.CharField(help_text='Name of the client giving the testimonial', max_length=100)),
                ('role', models.CharField(blank=True, help_text='Role or title of the client (optional)', max_length=100, null=True)),
                ('company_name', models.CharField(blank=True, help_text='Company name of the client (optional)', max_length=100, null=True)),
                ('quote', models.TextField(help_text='The actual testimonial quote from the client')),
                ('rating', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], help_text='Star rating (1-5)')),
                ('is_approved', models.BooleanField(default=False, help_text='Check to display this testimonial on the website')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Testimonials',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the blog post', max_length=200)),
                ('slug', models.SlugField(blank=True, help_text='A URL-friendly version of the title (auto-generated)', max_length=200, unique=True)),
                ('author', models.CharField(help_text='Author of the blog post', max_length=100)),
                ('pub_date', models.DateTimeField(auto_now_add=True, help_text='Date and time the post was published')),
                ('summary', models.CharField(help_text='A short summary of the blog post', max_length=300)),
                ('content', models.TextField(help_text='Full content of the blog post (can include HTML)')),
                ('featured_image', models.ImageField(blank=True, help_text='Featured image for the blog post', null=True, upload_to='blog_images/')),
                ('is_published', models.BooleanField(default=True, help_text='Check to publish the blog post')),
                ('category', models.ForeignKey(blank=True, help_text='Category of the blog post', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blogposts', to='website.category')),
            ],
            options={
                'verbose_name_plural': 'Blog Posts',
                'ordering': ['-pub_date'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the project', max_length=200)),
                ('short_description', models.CharField(blank=True, help_text='A brief summary of the project', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the project')),
                ('project_url', models.URLField(blank=True, help_text='URL to the live project (optional)', null=True)),
                ('image', models.ImageField(blank=True, help_text='Image representing the project', null=True, upload_to='projects/')),
                ('date_completed', models.DateField(blank=True, help_text='Date the project was completed', null=True)),
                ('client_name', models.CharField(blank=True, help_text='Name of the client for this project (optional)', max_length=100, null=True)),
                ('industry', models.CharField(blank=True, help_text="Industry of the client (e.g., 'Fintech', 'Healthcare') (optional)", max_length=100, null=True)),
                ('key_features', models.TextField(blank=True, help_text="List key features, one per line (e.g., 'User Authentication', 'Payment Gateway Integration')", null=True)),
                ('technologies', models.ManyToManyField(help_text='Technologies used in this project', related_name='projects', to='website.technology')),
            ],
            options={
                'verbose_name_plural': 'Projects',
                'ordering': ['-date_completed', 'title'],
            },
        ),
    ]
